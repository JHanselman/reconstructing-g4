AttachSpec("../../../CHIMP/CHIMP.spec");
AttachSpec("../../magma/spec");
load "gluingfuncs.m";

function EtaFunction0(g);
ZZ:=Integers();
zer:=ZeroMatrix(ZZ, g,g);
zer1:=ZeroMatrix(ZZ, g,1);
id:=IdentityMatrix(ZZ,g);
        triang:=zer;
        for i in [1..g] do
                for j in [i..g] do
                        triang[i,j]:=1;
                end for;
        end for;
        M:=VerticalJoin(HorizontalJoin(id, zer1), HorizontalJoin(triang, zer1));
        N:=VerticalJoin(HorizontalJoin(id, zer1), HorizontalJoin(zer1, triang));
        return &cat[[Transpose(Matrix(Transpose(N)[i])), Transpose(Matrix(Transpose(M)[i])) ]: i in [1..g+1]];
end function;



// make curves to glue using formulas in Howe--Leprevost--Poonen
//QQ := RationalsExtra(100);
//QQ := RationalsExtra(20);
QQ := Rationals();

R<x> := PolynomialRing(Rationals()); C := HyperellipticCurve(R![0, 0, -3, -1, 9, 6], R![1]);

roots := [el[1] : el in Roots(hev)];
U:={1,3,5};
eta := EtaFunction0(2);

theta4 := [K2!0: i in [1..16]];

for i in [1..5] do
	for j in [i+1..5] do
	T := {i,j, 6};	
	Tcomp := {1..6} diff T;
        S := T sdiff U;
	sign := (-1)^#(S meet U);
	cha := EtaValue(eta, Setseq(S));
	theta4[TCharToIndex(cha)] := sign * &*[ &*[(roots[nu]-roots[mu])^(-1): nu in T]: mu in Tcomp];
	end for;
end for;
	
	
M := ZeroMatrix(Rationals(), 5, 16);
M[1, 8]:=1;
M[1, 12]:=-1;
M[1, 15]:=1;
M[1, 9]:=-1;
M[2, 16]:=1;
M[2, 1]:=-1;
M[2, 6]:=-1;
M[2, 12]:=-1;
M[3, 6]:=1;
M[3, 2]:=-1;
M[3, 15]:=-1;
M[3, 3]:=1;
M[4, 4]:=1;
M[4, 16]:=-1;
M[4, 9]:=1;
M[4, 3]:=-1;
M[4, 3]:=1;
M[5, 4]:=1;
M[5, 8]:=-1;
M[5, 1]:=1;
M[5, 2]:=-1;
Ech := EchelonForm(M);
pivots := [Min([i: i in [1..16]| Ech[j,i] ne 0  ]): j in [1..5]];
even := [ 1, 2, 3, 4, 6, 8, 9, 12, 15, 16 ];
R16 := PolynomialRing(Rationals( ), 16);
t8 := &+[R16.i^2: i in even];
t16 := &+[R16.i^4: i in even];
equ := t8^2-4*t16;

subs := Setseq(MonomialsOfDegree(R16,1)); 

for i in [1..5] do
piv:= pivots[i];
subs[piv]:= -&+[Ech[i, j]*R16.j: j in [piv+1..16]];
end for;
equnew := Evaluate(equ, subs);

FP<t1, t2> := PolynomialRing(Rationals(), 2);
//FF<t1, t2> := RationalFunctionField(Rationals(), 2);

R4 := PolynomialRing(FP,5);
subsfin := [R4!0: i in [1..16]];
subsfin[6] := R4.1;
subsfin[9] := R4.2;
subsfin[12] := R4.3;
subsfin[15] := R4.4;
subsfin[16] := R4.5;
equfin:=Evaluate(equnew, subsfin);
